"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = exports.AlertWebhookDeploymentFailedObject = exports.AlertWebhookDeploymentSuccessObject = exports.DeployError = void 0;
const zod_1 = require("zod");
const api_js_1 = require("../../schemas/api.js");
const api_js_2 = require("./api.js");
const common_js_1 = require("./common.js");
/** Represents a failed run alert webhook payload */
const AlertWebhookRunFailedObject = zod_1.z.object({
    /** Task information */
    task: zod_1.z.object({
        /** Unique identifier for the task */
        id: zod_1.z.string(),
        /** File path where the task is defined */
        filePath: zod_1.z.string(),
        /** Name of the exported task function */
        exportName: zod_1.z.string(),
        /** Version of the task */
        version: zod_1.z.string(),
        /** Version of the SDK used */
        sdkVersion: zod_1.z.string(),
        /** Version of the CLI used */
        cliVersion: zod_1.z.string(),
    }),
    /** Run information */
    run: zod_1.z.object({
        /** Unique identifier for the run */
        id: zod_1.z.string(),
        /** Run number */
        number: zod_1.z.number(),
        /** Current status of the run */
        status: api_js_2.RunStatus,
        /** When the run was created */
        createdAt: zod_1.z.coerce.date(),
        /** When the run started executing */
        startedAt: zod_1.z.coerce.date().optional(),
        /** When the run finished executing */
        completedAt: zod_1.z.coerce.date().optional(),
        /** Whether this is a test run */
        isTest: zod_1.z.boolean(),
        /** Idempotency key for the run */
        idempotencyKey: zod_1.z.string().optional(),
        /** Associated tags */
        tags: zod_1.z.array(zod_1.z.string()),
        /** Error information */
        error: common_js_1.TaskRunError,
        /** Whether the run was an out-of-memory error */
        isOutOfMemoryError: zod_1.z.boolean(),
        /** Machine preset used for the run */
        machine: zod_1.z.string(),
        /** URL to view the run in the dashboard */
        dashboardUrl: zod_1.z.string(),
    }),
    /** Environment information */
    environment: zod_1.z.object({
        /** Environment ID */
        id: zod_1.z.string(),
        /** Environment type */
        type: api_js_1.RuntimeEnvironmentTypeSchema,
        /** Environment slug */
        slug: zod_1.z.string(),
    }),
    /** Organization information */
    organization: zod_1.z.object({
        /** Organization ID */
        id: zod_1.z.string(),
        /** Organization slug */
        slug: zod_1.z.string(),
        /** Organization name */
        name: zod_1.z.string(),
    }),
    /** Project information */
    project: zod_1.z.object({
        /** Project ID */
        id: zod_1.z.string(),
        /** Project reference */
        ref: zod_1.z.string(),
        /** Project slug */
        slug: zod_1.z.string(),
        /** Project name */
        name: zod_1.z.string(),
    }),
});
/** Represents a deployment error */
exports.DeployError = zod_1.z.object({
    /** Error name */
    name: zod_1.z.string(),
    /** Error message */
    message: zod_1.z.string(),
    /** Error stack trace */
    stack: zod_1.z.string().optional(),
    /** Standard error output */
    stderr: zod_1.z.string().optional(),
});
const deploymentCommonProperties = {
    /** Environment information */
    environment: zod_1.z.object({
        id: zod_1.z.string(),
        type: api_js_1.RuntimeEnvironmentTypeSchema,
        slug: zod_1.z.string(),
    }),
    /** Organization information */
    organization: zod_1.z.object({
        id: zod_1.z.string(),
        slug: zod_1.z.string(),
        name: zod_1.z.string(),
    }),
    /** Project information */
    project: zod_1.z.object({
        id: zod_1.z.string(),
        ref: zod_1.z.string(),
        slug: zod_1.z.string(),
        name: zod_1.z.string(),
    }),
};
const deploymentDeploymentCommonProperties = {
    /** Deployment ID */
    id: zod_1.z.string(),
    /** Deployment status */
    status: zod_1.z.string(),
    /** Deployment version */
    version: zod_1.z.string(),
    /** Short code identifier */
    shortCode: zod_1.z.string(),
};
/** Represents a successful deployment alert webhook payload */
exports.AlertWebhookDeploymentSuccessObject = zod_1.z.object({
    ...deploymentCommonProperties,
    deployment: zod_1.z.object({
        ...deploymentDeploymentCommonProperties,
        /** When the deployment completed */
        deployedAt: zod_1.z.coerce.date(),
    }),
    /** Deployed tasks */
    tasks: zod_1.z.array(zod_1.z.object({
        /** Task ID */
        id: zod_1.z.string(),
        /** File path where the task is defined */
        filePath: zod_1.z.string(),
        /** Name of the exported task function */
        exportName: zod_1.z.string(),
        /** Source of the trigger */
        triggerSource: zod_1.z.string(),
    })),
});
/** Represents a failed deployment alert webhook payload */
exports.AlertWebhookDeploymentFailedObject = zod_1.z.object({
    ...deploymentCommonProperties,
    deployment: zod_1.z.object({
        ...deploymentDeploymentCommonProperties,
        /** When the deployment failed */
        failedAt: zod_1.z.coerce.date(),
    }),
    /** Error information */
    error: exports.DeployError,
});
/** Common properties for all webhooks */
const commonProperties = {
    /** Webhook ID */
    id: zod_1.z.string(),
    /** When the webhook was created */
    created: zod_1.z.coerce.date(),
    /** Version of the webhook */
    webhookVersion: zod_1.z.string(),
};
/** Represents all possible webhook types */
exports.Webhook = zod_1.z.discriminatedUnion("type", [
    /** Run failed alert webhook */
    zod_1.z.object({
        ...commonProperties,
        type: zod_1.z.literal("alert.run.failed"),
        object: AlertWebhookRunFailedObject,
    }),
    /** Deployment success alert webhook */
    zod_1.z.object({
        ...commonProperties,
        type: zod_1.z.literal("alert.deployment.success"),
        object: exports.AlertWebhookDeploymentSuccessObject,
    }),
    /** Deployment failed alert webhook */
    zod_1.z.object({
        ...commonProperties,
        type: zod_1.z.literal("alert.deployment.failed"),
        object: exports.AlertWebhookDeploymentFailedObject,
    }),
]);
//# sourceMappingURL=webhooks.js.map