import { z } from "zod";
/** Represents a failed run alert webhook payload */
declare const AlertWebhookRunFailedObject: z.ZodObject<{
    /** Task information */
    task: z.ZodObject<{
        /** Unique identifier for the task */
        id: z.ZodString;
        /** File path where the task is defined */
        filePath: z.ZodString;
        /** Name of the exported task function */
        exportName: z.ZodString;
        /** Version of the task */
        version: z.ZodString;
        /** Version of the SDK used */
        sdkVersion: z.ZodString;
        /** Version of the CLI used */
        cliVersion: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
        filePath: string;
        exportName: string;
        sdkVersion: string;
        cliVersion: string;
    }, {
        version: string;
        id: string;
        filePath: string;
        exportName: string;
        sdkVersion: string;
        cliVersion: string;
    }>;
    /** Run information */
    run: z.ZodObject<{
        /** Unique identifier for the run */
        id: z.ZodString;
        /** Run number */
        number: z.ZodNumber;
        /** Current status of the run */
        status: z.ZodEnum<["WAITING_FOR_DEPLOY", "QUEUED", "EXECUTING", "REATTEMPTING", "FROZEN", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "INTERRUPTED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
        /** When the run was created */
        createdAt: z.ZodDate;
        /** When the run started executing */
        startedAt: z.ZodOptional<z.ZodDate>;
        /** When the run finished executing */
        completedAt: z.ZodOptional<z.ZodDate>;
        /** Whether this is a test run */
        isTest: z.ZodBoolean;
        /** Idempotency key for the run */
        idempotencyKey: z.ZodOptional<z.ZodString>;
        /** Associated tags */
        tags: z.ZodArray<z.ZodString, "many">;
        /** Error information */
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        /** Whether the run was an out-of-memory error */
        isOutOfMemoryError: z.ZodBoolean;
        /** Machine preset used for the run */
        machine: z.ZodString;
        /** URL to view the run in the dashboard */
        dashboardUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: number;
        status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
        id: string;
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        machine: string;
        dashboardUrl: string;
        isOutOfMemoryError: boolean;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
    }, {
        number: number;
        status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
        id: string;
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        machine: string;
        dashboardUrl: string;
        isOutOfMemoryError: boolean;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
    }>;
    /** Environment information */
    environment: z.ZodObject<{
        /** Environment ID */
        id: z.ZodString;
        /** Environment type */
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        /** Environment slug */
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    /** Organization information */
    organization: z.ZodObject<{
        /** Organization ID */
        id: z.ZodString;
        /** Organization slug */
        slug: z.ZodString;
        /** Organization name */
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    /** Project information */
    project: z.ZodObject<{
        /** Project ID */
        id: z.ZodString;
        /** Project reference */
        ref: z.ZodString;
        /** Project slug */
        slug: z.ZodString;
        /** Project name */
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        number: number;
        status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
        id: string;
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        machine: string;
        dashboardUrl: string;
        isOutOfMemoryError: boolean;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        version: string;
        id: string;
        filePath: string;
        exportName: string;
        sdkVersion: string;
        cliVersion: string;
    };
}, {
    run: {
        number: number;
        status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
        id: string;
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        machine: string;
        dashboardUrl: string;
        isOutOfMemoryError: boolean;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        version: string;
        id: string;
        filePath: string;
        exportName: string;
        sdkVersion: string;
        cliVersion: string;
    };
}>;
export type AlertWebhookRunFailedObject = z.infer<typeof AlertWebhookRunFailedObject>;
/** Represents a deployment error */
export declare const DeployError: z.ZodObject<{
    /** Error name */
    name: z.ZodString;
    /** Error message */
    message: z.ZodString;
    /** Error stack trace */
    stack: z.ZodOptional<z.ZodString>;
    /** Standard error output */
    stderr: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name: string;
    stack?: string | undefined;
    stderr?: string | undefined;
}, {
    message: string;
    name: string;
    stack?: string | undefined;
    stderr?: string | undefined;
}>;
export type DeployError = z.infer<typeof DeployError>;
/** Represents a successful deployment alert webhook payload */
export declare const AlertWebhookDeploymentSuccessObject: z.ZodObject<{
    deployment: z.ZodObject<{
        /** When the deployment completed */
        deployedAt: z.ZodDate;
        /** Deployment ID */
        id: z.ZodString;
        /** Deployment status */
        status: z.ZodString;
        /** Deployment version */
        version: z.ZodString;
        /** Short code identifier */
        shortCode: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        deployedAt: Date;
    }, {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        deployedAt: Date;
    }>;
    /** Deployed tasks */
    tasks: z.ZodArray<z.ZodObject<{
        /** Task ID */
        id: z.ZodString;
        /** File path where the task is defined */
        filePath: z.ZodString;
        /** Name of the exported task function */
        exportName: z.ZodString;
        /** Source of the trigger */
        triggerSource: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
        triggerSource: string;
    }, {
        id: string;
        filePath: string;
        exportName: string;
        triggerSource: string;
    }>, "many">;
    /** Environment information */
    environment: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    /** Organization information */
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    /** Project information */
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
}, "strip", z.ZodTypeAny, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        triggerSource: string;
    }[];
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    deployment: {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        deployedAt: Date;
    };
}, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        triggerSource: string;
    }[];
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    deployment: {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        deployedAt: Date;
    };
}>;
/** Represents a failed deployment alert webhook payload */
export declare const AlertWebhookDeploymentFailedObject: z.ZodObject<{
    deployment: z.ZodObject<{
        /** When the deployment failed */
        failedAt: z.ZodDate;
        /** Deployment ID */
        id: z.ZodString;
        /** Deployment status */
        status: z.ZodString;
        /** Deployment version */
        version: z.ZodString;
        /** Short code identifier */
        shortCode: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        failedAt: Date;
    }, {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        failedAt: Date;
    }>;
    /** Error information */
    error: z.ZodObject<{
        /** Error name */
        name: z.ZodString;
        /** Error message */
        message: z.ZodString;
        /** Error stack trace */
        stack: z.ZodOptional<z.ZodString>;
        /** Standard error output */
        stderr: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }>;
    /** Environment information */
    environment: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    /** Organization information */
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    /** Project information */
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    deployment: {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        failedAt: Date;
    };
}, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    deployment: {
        status: string;
        version: string;
        id: string;
        shortCode: string;
        failedAt: Date;
    };
}>;
export type AlertWebhookDeploymentSuccessObject = z.infer<typeof AlertWebhookDeploymentSuccessObject>;
export type AlertWebhookDeploymentFailedObject = z.infer<typeof AlertWebhookDeploymentFailedObject>;
/** Represents all possible webhook types */
export declare const Webhook: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"alert.run.failed">;
    object: z.ZodObject<{
        /** Task information */
        task: z.ZodObject<{
            /** Unique identifier for the task */
            id: z.ZodString;
            /** File path where the task is defined */
            filePath: z.ZodString;
            /** Name of the exported task function */
            exportName: z.ZodString;
            /** Version of the task */
            version: z.ZodString;
            /** Version of the SDK used */
            sdkVersion: z.ZodString;
            /** Version of the CLI used */
            cliVersion: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        }, {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        }>;
        /** Run information */
        run: z.ZodObject<{
            /** Unique identifier for the run */
            id: z.ZodString;
            /** Run number */
            number: z.ZodNumber;
            /** Current status of the run */
            status: z.ZodEnum<["WAITING_FOR_DEPLOY", "QUEUED", "EXECUTING", "REATTEMPTING", "FROZEN", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "INTERRUPTED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
            /** When the run was created */
            createdAt: z.ZodDate;
            /** When the run started executing */
            startedAt: z.ZodOptional<z.ZodDate>;
            /** When the run finished executing */
            completedAt: z.ZodOptional<z.ZodDate>;
            /** Whether this is a test run */
            isTest: z.ZodBoolean;
            /** Idempotency key for the run */
            idempotencyKey: z.ZodOptional<z.ZodString>;
            /** Associated tags */
            tags: z.ZodArray<z.ZodString, "many">;
            /** Error information */
            error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"BUILT_IN_ERROR">;
                name: z.ZodString;
                message: z.ZodString;
                stackTrace: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            }, {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"CUSTOM_ERROR">;
                raw: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "CUSTOM_ERROR";
                raw: string;
            }, {
                type: "CUSTOM_ERROR";
                raw: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"STRING_ERROR">;
                raw: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "STRING_ERROR";
                raw: string;
            }, {
                type: "STRING_ERROR";
                raw: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"INTERNAL_ERROR">;
                code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT"]>;
                message: z.ZodOptional<z.ZodString>;
                stackTrace: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            }, {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            }>]>;
            /** Whether the run was an out-of-memory error */
            isOutOfMemoryError: z.ZodBoolean;
            /** Machine preset used for the run */
            machine: z.ZodString;
            /** URL to view the run in the dashboard */
            dashboardUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        }, {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        }>;
        /** Environment information */
        environment: z.ZodObject<{
            /** Environment ID */
            id: z.ZodString;
            /** Environment type */
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            /** Environment slug */
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        /** Organization information */
        organization: z.ZodObject<{
            /** Organization ID */
            id: z.ZodString;
            /** Organization slug */
            slug: z.ZodString;
            /** Organization name */
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        /** Project information */
        project: z.ZodObject<{
            /** Project ID */
            id: z.ZodString;
            /** Project reference */
            ref: z.ZodString;
            /** Project slug */
            slug: z.ZodString;
            /** Project name */
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        run: {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        };
    }, {
        run: {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        };
    }>;
    /** Webhook ID */
    id: z.ZodString;
    /** When the webhook was created */
    created: z.ZodDate;
    /** Version of the webhook */
    webhookVersion: z.ZodString;
}, "strip", z.ZodTypeAny, {
    object: {
        run: {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        };
    };
    type: "alert.run.failed";
    id: string;
    created: Date;
    webhookVersion: string;
}, {
    object: {
        run: {
            number: number;
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "TIMED_OUT" | "EXECUTING" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "FAILED" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            error: {
                message: string;
                type: "BUILT_IN_ERROR";
                name: string;
                stackTrace: string;
            } | {
                type: "CUSTOM_ERROR";
                raw: string;
            } | {
                type: "STRING_ERROR";
                raw: string;
            } | {
                code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT";
                type: "INTERNAL_ERROR";
                message?: string | undefined;
                stackTrace?: string | undefined;
            };
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            machine: string;
            dashboardUrl: string;
            isOutOfMemoryError: boolean;
            startedAt?: Date | undefined;
            completedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            version: string;
            id: string;
            filePath: string;
            exportName: string;
            sdkVersion: string;
            cliVersion: string;
        };
    };
    type: "alert.run.failed";
    id: string;
    created: Date;
    webhookVersion: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"alert.deployment.success">;
    object: z.ZodObject<{
        deployment: z.ZodObject<{
            /** When the deployment completed */
            deployedAt: z.ZodDate;
            /** Deployment ID */
            id: z.ZodString;
            /** Deployment status */
            status: z.ZodString;
            /** Deployment version */
            version: z.ZodString;
            /** Short code identifier */
            shortCode: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        }, {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        }>;
        /** Deployed tasks */
        tasks: z.ZodArray<z.ZodObject<{
            /** Task ID */
            id: z.ZodString;
            /** File path where the task is defined */
            filePath: z.ZodString;
            /** Name of the exported task function */
            exportName: z.ZodString;
            /** Source of the trigger */
            triggerSource: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }, {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }>, "many">;
        /** Environment information */
        environment: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        /** Organization information */
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        /** Project information */
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        tasks: {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }[];
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        };
    }, {
        tasks: {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }[];
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        };
    }>;
    /** Webhook ID */
    id: z.ZodString;
    /** When the webhook was created */
    created: z.ZodDate;
    /** Version of the webhook */
    webhookVersion: z.ZodString;
}, "strip", z.ZodTypeAny, {
    object: {
        tasks: {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }[];
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        };
    };
    type: "alert.deployment.success";
    id: string;
    created: Date;
    webhookVersion: string;
}, {
    object: {
        tasks: {
            id: string;
            filePath: string;
            exportName: string;
            triggerSource: string;
        }[];
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            deployedAt: Date;
        };
    };
    type: "alert.deployment.success";
    id: string;
    created: Date;
    webhookVersion: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"alert.deployment.failed">;
    object: z.ZodObject<{
        deployment: z.ZodObject<{
            /** When the deployment failed */
            failedAt: z.ZodDate;
            /** Deployment ID */
            id: z.ZodString;
            /** Deployment status */
            status: z.ZodString;
            /** Deployment version */
            version: z.ZodString;
            /** Short code identifier */
            shortCode: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        }, {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        }>;
        /** Error information */
        error: z.ZodObject<{
            /** Error name */
            name: z.ZodString;
            /** Error message */
            message: z.ZodString;
            /** Error stack trace */
            stack: z.ZodOptional<z.ZodString>;
            /** Standard error output */
            stderr: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        }, {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        }>;
        /** Environment information */
        environment: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        /** Organization information */
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        /** Project information */
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        };
    }, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        };
    }>;
    /** Webhook ID */
    id: z.ZodString;
    /** When the webhook was created */
    created: z.ZodDate;
    /** Version of the webhook */
    webhookVersion: z.ZodString;
}, "strip", z.ZodTypeAny, {
    object: {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        };
    };
    type: "alert.deployment.failed";
    id: string;
    created: Date;
    webhookVersion: string;
}, {
    object: {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
            stderr?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        deployment: {
            status: string;
            version: string;
            id: string;
            shortCode: string;
            failedAt: Date;
        };
    };
    type: "alert.deployment.failed";
    id: string;
    created: Date;
    webhookVersion: string;
}>]>;
export type Webhook = z.infer<typeof Webhook>;
export type RunFailedWebhook = Extract<Webhook, {
    type: "alert.run.failed";
}>;
export type DeploymentSuccessWebhook = Extract<Webhook, {
    type: "alert.deployment.success";
}>;
export type DeploymentFailedWebhook = Extract<Webhook, {
    type: "alert.deployment.failed";
}>;
export {};
